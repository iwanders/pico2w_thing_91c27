#[cfg(test)]
mod test {

    #[test]
    fn test_x25519_test1() {
        crate::test::init();

        // https://datatracker.ietf.org/doc/html/rfc7748#section-5.2
        // https://github.com/apple/HomeKitADK/blob/fb201f98f5fdc7fef6a455054f08b59cca5d1ec8/Tests/HAPCryptoTest.c#L52

        let rfc7748_skey1: [u8; _] = [
            0x4b, 0x66, 0xe9, 0xd4, 0xd1, 0xb4, 0x67, 0x3c, 0x5a, 0xd2, 0x26, 0x91, 0x95, 0x7d,
            0x6a, 0xf5, 0xc1, 0x1b, 0x64, 0x21, 0xe0, 0xea, 0x01, 0xd4, 0x2c, 0xa4, 0x16, 0x9e,
            0x79, 0x18, 0xba, 0x0d,
        ];

        let rfc7748_pkey1: [u8; _] = [
            0xe5, 0x21, 0x0f, 0x12, 0x78, 0x68, 0x11, 0xd3, 0xf4, 0xb7, 0x95, 0x9d, 0x05, 0x38,
            0xae, 0x2c, 0x31, 0xdb, 0xe7, 0x10, 0x6f, 0xc0, 0x3c, 0x3e, 0xfc, 0x4c, 0xd5, 0x49,
            0xc7, 0x15, 0xa4, 0x93,
        ];

        let rfc7748_csec1: [u8; _] = [
            0x95, 0xcb, 0xde, 0x94, 0x76, 0xe8, 0x90, 0x7d, 0x7a, 0xad, 0xe4, 0x5c, 0xb4, 0xb8,
            0x73, 0xf8, 0x8b, 0x59, 0x5a, 0x68, 0x79, 0x9f, 0xa1, 0x52, 0xe6, 0xf8, 0xf7, 0x64,
            0x7a, 0xac, 0x79, 0x57,
        ];

        let rfc7748_alice_skey: [u8; _] = [
            0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2,
            0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5,
            0x1d, 0xb9, 0x2c, 0x2a,
        ];

        let rfc7748_alice_pkey: [u8; _] = [
            0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d, 0xdc, 0xb4, 0x3e,
            0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38, 0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e,
            0xaa, 0x9b, 0x4e, 0x6a,
        ];

        // test_X25519_1(rfc7748_alice_skey, rfc7748_alice_pkey);
        // Check derivation of public key?
        // HAP_X25519_scalarmult_base

        let secret = x25519_dalek::StaticSecret::from(rfc7748_alice_skey);
        let public = x25519_dalek::PublicKey::from(&secret);
        assert_eq!(public.as_bytes(), &rfc7748_alice_pkey);

        // test_X25519_2(rfc7748_skey1, rfc7748_pkey1, rfc7748_csec1);
        // The HAP_X25519_scalarmult situation?
        let secret = x25519_dalek::StaticSecret::from(rfc7748_skey1);
        let public = x25519_dalek::PublicKey::from(rfc7748_pkey1);

        let common_secret = secret.diffie_hellman(&public);

        assert_eq!(common_secret.as_bytes(), &rfc7748_csec1);
    }
}

use ed25519_dalek::Signature;
use ed25519_dalek::{
    PUBLIC_KEY_LENGTH, SECRET_KEY_LENGTH, SIGNATURE_LENGTH, Signer, SigningKey, Verifier,
    VerifyingKey,
};

type SecretKeyBuffer = [u8; SECRET_KEY_LENGTH];
type PublicKeyBuffer = [u8; PUBLIC_KEY_LENGTH];

/// Verify that the data is signed with the private key associated to the public key, returns Ok if the signature
/// is correct, Err otherwise.
/// Data should NOT be used if this function returns an Err.
/// If the sizes of any of the slices are incorrect, this function returns Err without any further information.
#[must_use]
pub fn ed25519_verify(
    public_key: &[u8],
    data: &[u8],
    signature: &[u8],
) -> Result<(), ed25519_dalek::SignatureError> {
    if public_key.len() != PUBLIC_KEY_LENGTH {
        return Err(ed25519_dalek::SignatureError::new());
    }
    let public_key_buffer: &PublicKeyBuffer = public_key
        .try_into()
        .map_err(|_| ed25519_dalek::SignatureError::new())?;

    let verifying_key = VerifyingKey::from_bytes(&public_key_buffer);
    let verifying_key = if let Ok(verifying_key) = verifying_key {
        verifying_key
    } else {
        return Err(ed25519_dalek::SignatureError::new());
    };
    let sig = Signature::from_slice(signature);
    let sig = if let Ok(sig) = sig {
        sig
    } else {
        return Err(ed25519_dalek::SignatureError::new());
    };
    verifying_key.verify(data, &sig)
}

pub fn ed25519_create_public(
    secret_key: &[u8],
    public_key: &mut [u8],
) -> Result<(), ed25519_dalek::SignatureError> {
    if public_key.len() != PUBLIC_KEY_LENGTH {
        return Err(ed25519_dalek::SignatureError::new());
    }

    let as_array: &SecretKeyBuffer = secret_key
        .try_into()
        .map_err(|_| ed25519_dalek::SignatureError::new())?;
    let signing_key: SigningKey = SigningKey::from_bytes(as_array);
    let verifying_key: VerifyingKey = signing_key.verifying_key();
    public_key.copy_from_slice(verifying_key.as_bytes());
    Ok(())
}

pub fn ed25519_sign(
    secret_key: &[u8],
    data: &[u8],
    signature: &mut [u8],
) -> Result<(), ed25519_dalek::SignatureError> {
    let as_array: &SecretKeyBuffer = secret_key
        .try_into()
        .map_err(|_| ed25519_dalek::SignatureError::new())?;
    let signing_key: SigningKey = SigningKey::from_bytes(as_array);
    let signature_typed = signing_key.sign(&data);

    let signature_bytes = signature_typed.to_bytes();
    if signature.len() != signature_bytes.len() {
        return Err(ed25519_dalek::SignatureError::new());
    }

    signature.copy_from_slice(signature_bytes.as_slice());
    Ok(())
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_ed25519_test2() {
        crate::test::init();
        // https://datatracker.ietf.org/doc/html/rfc8032#section-7.1
        //
        let secret_key: &[u8] = &[
            0x4c, 0xcd, 0x08, 0x9b, 0x28, 0xff, 0x96, 0xda, 0x9d, 0xb6, 0xc3, 0x46, 0xec, 0x11,
            0x4e, 0x0f, 0x5b, 0x8a, 0x31, 0x9f, 0x35, 0xab, 0xa6, 0x24, 0xda, 0x8c, 0xf6, 0xed,
            0x4f, 0xb8, 0xa6, 0xfb,
        ];

        let public_key: &[u8] = &[
            0x3d, 0x40, 0x17, 0xc3, 0xe8, 0x43, 0x89, 0x5a, 0x92, 0xb7, 0x0a, 0xa7, 0x4d, 0x1b,
            0x7e, 0xbc, 0x9c, 0x98, 0x2c, 0xcf, 0x2e, 0xc4, 0x96, 0x8c, 0xc0, 0xcd, 0x55, 0xf1,
            0x2a, 0xf4, 0x66, 0x0c,
        ];

        let msg: &[u8] = &[0x72];

        let signature: &[u8] = &[
            0x92, 0xa0, 0x09, 0xa9, 0xf0, 0xd4, 0xca, 0xb8, 0x72, 0x0e, 0x82, 0x0b, 0x5f, 0x64,
            0x25, 0x40, 0xa2, 0xb2, 0x7b, 0x54, 0x16, 0x50, 0x3f, 0x8f, 0xb3, 0x76, 0x22, 0x23,
            0xeb, 0xdb, 0x69, 0xda, 0x08, 0x5a, 0xc1, 0xe4, 0x3e, 0x15, 0x99, 0x6e, 0x45, 0x8f,
            0x36, 0x13, 0xd0, 0xf1, 0x1d, 0x8c, 0x38, 0x7b, 0x2e, 0xae, 0xb4, 0x30, 0x2a, 0xee,
            0xb0, 0x0d, 0x29, 0x16, 0x12, 0xbb, 0x0c, 0x00,
        ];

        assert!(ed25519_verify(&public_key, &msg, &signature).is_ok());

        let mut pub_key_created = [0u8; PUBLIC_KEY_LENGTH];
        assert!(ed25519_create_public(&secret_key, &mut pub_key_created).is_ok());
        assert_eq!(&pub_key_created, public_key);

        let mut signature_created = [0u8; SIGNATURE_LENGTH];
        assert!(ed25519_sign(&secret_key, &msg, &mut signature_created).is_ok());
        assert_eq!(&signature_created, signature);
    }

    #[test]
    fn test_ed25519_device_info() {
        let data: &[u8] = &[
            0x95, 0xf6, 0x95, 0xcb, 0xed, 0xbc, 0x9e, 0x23, 0x2e, 0x83, 0x68, 0xf7, 0x85, 0x24,
            0x8c, 0x77, 0x79, 0x58, 0xde, 0xa0, 0xe9, 0x9a, 0x92, 0x91, 0x01, 0x6d, 0x5a, 0x0c,
            0x43, 0xc1, 0x91, 0x0a, 0x37, 0x37, 0x37, 0x35, 0x35, 0x44, 0x44, 0x35, 0x2d, 0x37,
            0x32, 0x32, 0x33, 0x2d, 0x34, 0x41, 0x33, 0x42, 0x2d, 0x38, 0x37, 0x44, 0x32, 0x2d,
            0x43, 0x32, 0x34, 0x41, 0x32, 0x34, 0x46, 0x34, 0x30, 0x36, 0x39, 0x35, 0xc5, 0xd9,
            0x4b, 0xdb, 0xed, 0x4d, 0x31, 0x54, 0x8b, 0xc3, 0xa1, 0xb5, 0x09, 0x26, 0x86, 0x6c,
            0x18, 0xcf, 0x0c, 0x89, 0xc4, 0x45, 0x66, 0x86, 0x9e, 0x85, 0x62, 0xdf, 0xfc, 0x59,
            0xe3, 0xa8,
        ];
        let public_key: &[u8] = &data[data.len() - PUBLIC_KEY_LENGTH..];

        let signature: &[u8] = &[
            0xd7, 0x73, 0xee, 0x6a, 0x18, 0xc2, 0x86, 0x54, 0x64, 0xf0, 0x67, 0x10, 0x20, 0xf0,
            0x0f, 0xb9, 0xfe, 0xca, 0xa8, 0x9c, 0x60, 0x5b, 0x57, 0xf8, 0x11, 0x0e, 0x8f, 0xe8,
            0x8c, 0x3e, 0x75, 0x9d, 0xfe, 0x1b, 0xe0, 0xb6, 0xd8, 0x00, 0xd7, 0x6c, 0x90, 0xb5,
            0x7c, 0x8f, 0xd7, 0x4c, 0x67, 0x5b, 0xc8, 0x91, 0xd1, 0xb5, 0x54, 0x3a, 0x2c, 0x54,
            0x87, 0x1f, 0x67, 0x5c, 0xee, 0xd6, 0xed, 0x0d,
        ];
        assert!(ed25519_verify(&public_key, &data, &signature).is_ok());
    }
    #[test]
    fn test_ed25519_public_key_derviation() {
        let secret_key: &[u8] = &[
            0x15, 0xf5, 0xa7, 0xdb, 0xa0, 0x11, 0x21, 0xea, 0x23, 0xea, 0x88, 0x7f, 0x0a, 0x14,
            0xb0, 0x27, 0xb6, 0xe6, 0xd4, 0x2d, 0xd1, 0x5b, 0xc9, 0x59, 0x19, 0x94, 0xbc, 0x22,
            0xee, 0x52, 0xfa, 0xa9,
        ];

        let expected_public_key: [u8; _] = [
            0xa1, 0x83, 0x6d, 0xb8, 0xc5, 0xf8, 0xb1, 0x27, 0x1c, 0xbc, 0xe2, 0xdf, 0x72, 0xeb,
            0x78, 0x9b, 0x55, 0x48, 0x6e, 0x53, 0x6c, 0x11, 0xe1, 0x5b, 0xb3, 0x9c, 0x65, 0xc9,
            0x26, 0x79, 0x16, 0x5a,
        ];
        let mut pub_key_created = [0u8; PUBLIC_KEY_LENGTH];
        assert!(ed25519_create_public(&secret_key, &mut pub_key_created).is_ok());
        assert_eq!(pub_key_created, expected_public_key);
    }
}
